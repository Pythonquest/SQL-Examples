-- PROCEDURE TO ASSIGN THE PREVIOUS JOB ID VALUE TO THE CURRENT JOB ID VALUE
CREATE OR REPLACE PROCEDURE CAREER_CHANGE IS
    LV_COUNTER          NUMBER;
    LV_SQL_TEXT         VARCHAR2(4000); -- VARIABLE TO HOUSE DYNAMIC SQL QUERIES
    LV_OLD_JOB_ID       VARCHAR2(10);   -- OLD JOB ID TO BE ASSIGNED TO THE NEXT ONE
    LV_CURRENT_JOB_ID   VARCHAR2(10);   -- CURRENTLY FETCHED JOB ID VALUE
    LV_CURRENT_EMPL_ID  INT;            -- CURRENTLY FETCHED EMPLOYEE ID
    -- CURSOR WILL BE USED TO LOOP THROUGH THE EMPLOYEES TABLE, CHANGING JOB ID VALUES AS IT GOES.
    CURSOR LC_WORKING_ID_TABLE IS
        SELECT EMPLOYEE_ID, JOB_ID FROM HR.EMPLOYEES ORDER BY HR.EMPLOYEES.EMPLOYEE_ID;
BEGIN

    -- CHECK FOR PRE-EXISTING RESULTS TABLE
    LV_SQL_TEXT := 'SELECT COUNT(*) FROM ALL_OBJECTS WHERE OBJECT_TYPE = ''TABLE'' AND OBJECT_NAME = ''J1NX_CAREER_CHANGE''';
    EXECUTE IMMEDIATE LV_SQL_TEXT INTO LV_COUNTER;

    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','CHECK FOR PRE-EXISTING TABLE J1NX_CAREER_CHANGE');

    --dbms_output.put_line('LV_COUNTER = ' || LV_COUNTER);

    -- DROP RESULTS TABLE IF PRE-EXISTING
    IF LV_COUNTER > 0 THEN
       LV_SQL_TEXT := 'DROP TABLE J1NX_CAREER_CHANGE';
        EXECUTE IMMEDIATE LV_SQL_TEXT;
    END IF;

    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','DROP TABLE');

    -- CREATE RESULTS TABLE
    LV_SQL_TEXT :=  'CREATE TABLE J1NX_CAREER_CHANGE AS ' ||
                    'SELECT HR.EMPLOYEES.EMPLOYEE_ID, HR.EMPLOYEES.FIRST_NAME, HR.EMPLOYEES.LAST_NAME, HR.EMPLOYEES.JOB_ID ' ||
                    'FROM HR.EMPLOYEES ORDER BY HR.EMPLOYEES.EMPLOYEE_ID';
    EXECUTE IMMEDIATE (LV_SQL_TEXT);

    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','CREATE TABLE J1NX_CAREER_CHANGE');

    -- BEGIN USING CURSOR
    OPEN LC_WORKING_ID_TABLE;
    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','OPEN CURSOR');

    -- GET FIRST RECORD AND ASSIGN FIRST JOB ID VALUE
    FETCH LC_WORKING_ID_TABLE INTO LV_CURRENT_EMPL_ID, LV_CURRENT_JOB_ID;
    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','FETCH FIRST RECORD');

    -- BEGIN GOING THROUGH ENTIRE TABLE
    LOOP
        -- STORE OLD JOB ID VALUE
        LV_OLD_JOB_ID := LV_CURRENT_JOB_ID;
        -- GET NEXT/CURRENT JOB ID
        FETCH LC_WORKING_ID_TABLE INTO LV_CURRENT_EMPL_ID, LV_CURRENT_JOB_ID;
        J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','FETCH NEXT RECORD');

        -- REASSIGN OLD JOB ID TO THE CURRENT JOB ID COLUMN VALUE
        LV_SQL_TEXT :=  'UPDATE J1NX_CAREER_CHANGE ' ||
                        'SET J1NX_CAREER_CHANGE.JOB_ID = ' ||
                        '''' || LV_OLD_JOB_ID || '''' ||
                        'WHERE J1NX_CAREER_CHANGE.EMPLOYEE_ID = ' ||
                        LV_CURRENT_EMPL_ID;
        EXECUTE IMMEDIATE LV_SQL_TEXT;
        J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','UPDATE JOB_ID');

        -- STOP THE CYCLE WHEN NO MORE JOB ID VALUES ARE READ FROM THE TABLE
        EXIT WHEN LC_WORKING_ID_TABLE%NOTFOUND;
    END LOOP;
    -- ALWAYS REMEMBER TO CLOSE THE CURSOR
    CLOSE LC_WORKING_ID_TABLE;
    J1NX_SIMPLE_ERROR_LOG_WRITE ('J1NX_CAREER_CHANGE','LV_CURRENT_JOB_ID','CLOSE CURSOR');

END;
